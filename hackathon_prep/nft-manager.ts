import { walletConfig } from './wallet-config';
import { Transaction } from '@mysten/sui/transactions';

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–∞—à–µ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ —Å basic_nft –º–æ–¥—É–ª–µ–º
 * –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–º–µ–Ω–∏—Ç–µ PRIVATE_KEY –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
 */

// ‚ö†Ô∏è –í–ê–ñ–ù–û: –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∫–æ–º–º–∏—Ç—å—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!
// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
const PRIVATE_KEY = 'suiprivkey1qz5trqhm0wl8qzhc40nr9x8l7sthukmll0akzeqvdu94u49lhvqewrx6ws2';

// ID –ø–∞–∫–µ—Ç–∞ –≤–∞—à–µ–≥–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –º–æ–¥—É–ª—è (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è)
const PACKAGE_ID = 'YOUR_PACKAGE_ID_HERE';

export class NFTManager {
    private initialized = false;

    async init() {
        if (!this.initialized) {
            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ—à–µ–ª–µ–∫
            walletConfig.importWalletFromSuiPrivateKey(PRIVATE_KEY);
            this.initialized = true;
            console.log('‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ NFT –º–µ–Ω–µ–¥–∂–µ—Ä—É');
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
    async checkBalance(): Promise<string> {
        await this.init();
        const balance = await walletConfig.getBalance();
        console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: ${balance} SUI`);
        return balance;
    }

    // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π GameNFT
    async mintGameNFT(params: {
        name: string;
        description: string;
        imageUrl: string;
        level: number;
        power: number;
        rarity: number;
    }) {
        await this.init();

        console.log('üé® –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ GameNFT...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å rarity
        if (params.rarity < 1 || params.rarity > 4) {
            throw new Error('Rarity –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 4');
        }

        const tx = new Transaction();

        tx.moveCall({
            target: `${PACKAGE_ID}::basic_nft::mint_game_nft`,
            arguments: [
                tx.pure.string(params.name),
                tx.pure.string(params.description),
                tx.pure.string(params.imageUrl),
                tx.pure.u64(params.level),
                tx.pure.u64(params.power),
                tx.pure.u8(params.rarity),
            ],
        });

        try {
            const result = await walletConfig.signAndExecuteTransaction(tx);
            console.log('‚úÖ GameNFT —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
            console.log('Transaction digest:', result.digest);
            return result;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ NFT:', error);
            throw error;
        }
    }

    // –ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å NFT
    async levelUpNFT(nftObjectId: string) {
        await this.init();

        console.log(`‚¨ÜÔ∏è –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è NFT ${nftObjectId}...`);

        const tx = new Transaction();

        tx.moveCall({
            target: `${PACKAGE_ID}::basic_nft::level_up`,
            arguments: [tx.object(nftObjectId)],
        });

        try {
            const result = await walletConfig.signAndExecuteTransaction(tx);
            console.log('‚úÖ NFT —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∫–∞—á–∞–Ω!');
            console.log('Transaction digest:', result.digest);
            return result;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫–∞—á–∫–µ NFT:', error);
            throw error;
        }
    }

    // –ü–µ—Ä–µ–¥–∞—Ç—å NFT –¥—Ä—É–≥–æ–º—É –∞–¥—Ä–µ—Å—É
    async transferNFT(nftObjectId: string, recipientAddress: string) {
        await this.init();

        console.log(`üì§ –ü–µ—Ä–µ–¥–∞—á–∞ NFT ${nftObjectId} –∞–¥—Ä–µ—Å—É ${recipientAddress}...`);

        const tx = new Transaction();

        tx.moveCall({
            target: `${PACKAGE_ID}::basic_nft::transfer_nft`,
            arguments: [
                tx.object(nftObjectId),
                tx.pure.address(recipientAddress)
            ],
        });

        try {
            const result = await walletConfig.signAndExecuteTransaction(tx);
            console.log('‚úÖ NFT —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω!');
            console.log('Transaction digest:', result.digest);
            return result;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ NFT:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ NFT –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –∫–æ—à–µ–ª—å–∫—É
    async getMyNFTs() {
        await this.init();
        
        console.log('üîç –ü–æ–∏—Å–∫ –≤–∞—à–∏—Ö NFT...');
        
        const objects = await walletConfig.getOwnedObjects();
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ GameNFT –æ–±—ä–µ–∫—Ç—ã
        const nfts = objects.filter(obj => 
            obj.data?.type?.includes('::basic_nft::GameNFT')
        );

        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${nfts.length} NFT`);
        return nfts;
    }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async function example() {
    const nftManager = new NFTManager();
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        await nftManager.checkBalance();
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π NFT
        const mintResult = await nftManager.mintGameNFT({
            name: 'Legendary Dragon',
            description: 'A powerful dragon NFT for the hackathon',
            imageUrl: 'https://example.com/dragon.png',
            level: 1,
            power: 100,
            rarity: 4 // Legendary
        });
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö NFT
        await nftManager.getMyNFTs();
        
        console.log('üéâ –ü—Ä–∏–º–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ:', error);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export const nftManager = new NFTManager();

// –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–∞:
// example();
