import { SuiClient, getFullnodeUrl } from '@mysten/sui/client';

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ basic_nft
 */

const client = new SuiClient({
    url: getFullnodeUrl('testnet')
});

export async function findBasicNftPackages(ownerAddress?: string): Promise<any[]> {
    try {
        console.log('üîç –ü–æ–∏—Å–∫ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ basic_nft...');

        if (ownerAddress) {
            // –ò—â–µ–º –æ–±—ä–µ–∫—Ç—ã —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
            const objects = await client.getOwnedObjects({
                owner: ownerAddress,
                options: {
                    showType: true,
                    showContent: true,
                }
            });

            console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ —É ${ownerAddress}:`, objects.data.length);

            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∞–∫–µ—Ç—ã
            const packages = objects.data.filter(obj =>
                obj.data?.type?.includes('Package') ||
                obj.data?.type?.includes('basic_nft')
            );

            return packages;
        }

        return [];
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞–∫–µ—Ç–æ–≤:', error);
        return [];
    }
}

export async function checkPackageExists(packageId: string): Promise<boolean> {
    try {
        const packageObj = await client.getObject({
            id: packageId,
            options: {
                showContent: true,
                showType: true,
            }
        });

        console.log('üì¶ –ü–∞–∫–µ—Ç –Ω–∞–π–¥–µ–Ω:', packageObj);
        return packageObj.data !== null;
    } catch (error) {
        console.error(`‚ùå –ü–∞–∫–µ—Ç ${packageId} –Ω–µ –Ω–∞–π–¥–µ–Ω:`, error);
        return false;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export { client as suiClient };
