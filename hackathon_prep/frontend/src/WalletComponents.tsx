import React, { useState, useEffect } from 'react';
import { ConnectButton, useCurrentAccount, useSignAndExecuteTransaction, useSuiClient } from '@mysten/dapp-kit';
import { Transaction } from '@mysten/sui/transactions';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ
export const WalletInfo: React.FC = () => {
    const currentAccount = useCurrentAccount();
    const [balance, setBalance] = useState<string>('0');
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const suiClient = useSuiClient();

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
    useEffect(() => {
        if (currentAccount?.address && suiClient) {
            setIsLoading(true);
            suiClient.getBalance({
                owner: currentAccount.address,
            }).then((balanceData) => {
                const balanceInSui = (parseInt(balanceData.totalBalance) / 1_000_000_000).toFixed(4);
                setBalance(balanceInSui);
            }).catch((error) => {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
                setBalance('–û—à–∏–±–∫–∞');
            }).finally(() => {
                setIsLoading(false);
            });
        } else {
            setBalance('0');
            setIsLoading(false);
        }
    }, [currentAccount, suiClient]);

    return (
        <div className="wallet-info">
            <h2>üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞</h2>

            {!currentAccount ? (
                <div>
                    <p>–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à Sui Wallet –∏–∑ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:</p>
                    <ConnectButton />

                    <div style={{ marginTop: '20px', padding: '15px', backgroundColor: '#fff3cd', border: '1px solid #ffeeba', borderRadius: '6px' }}>
                        <h4>üìã –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ Sui Wallet:</h4>
                        <ol style={{ textAlign: 'left', maxWidth: '500px', margin: '0 auto' }}>
                            <li>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ <a href="https://chrome.google.com/webstore/detail/sui-wallet/opcgpfmipidbgpenhmajoajpbobppdil" target="_blank" rel="noopener">Sui Wallet</a></li>
                            <li><strong>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫</strong> –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏</li>
                            <li><strong>–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ Testnet</strong> –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è</li>
                            <li>–ü–æ–ª—É—á–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞ <a href="https://faucet.sui.io" target="_blank" rel="noopener">faucet.sui.io</a></li>
                            <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "Connect Wallet" –≤—ã—à–µ</li>
                        </ol>
                    </div>
                </div>
            ) : (
                <div>
                    <h3>‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω!</h3>

                    <p><strong>–ê–¥—Ä–µ—Å:</strong></p>
                    <code style={{
                        display: 'block',
                        backgroundColor: '#f8f9fa',
                        padding: '10px',
                        borderRadius: '4px',
                        fontSize: '14px',
                        wordBreak: 'break-all',
                        margin: '10px 0'
                    }}>{currentAccount.address}</code>
                    <p><strong>–ë–∞–ª–∞–Ω—Å:</strong> {isLoading ? '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...' : `${balance} SUI`}</p>

                    {!isLoading && parseFloat(balance) === 0 && (
                        <div style={{ marginTop: '15px', padding: '10px', backgroundColor: '#f8d7da', border: '1px solid #f5c6cb', borderRadius: '6px' }}>
                            <p>‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç SUI —Ç–æ–∫–µ–Ω–æ–≤!</p>
                            <a href={`https://faucet.sui.io?address=${currentAccount.address}`} target="_blank" rel="noopener noreferrer">
                                üö∞ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
                            </a>
                        </div>
                    )}

                    <div style={{ marginTop: '20px' }}>
                        <ConnectButton />
                    </div>
                </div>
            )}
        </div>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è GameNFT
export const NFTMinter: React.FC<{ packageId?: string }> = ({ packageId }) => {
    const currentAccount = useCurrentAccount();
    const { mutate: signAndExecute } = useSignAndExecuteTransaction();
    const suiClient = useSuiClient();
    const [loading, setLoading] = useState(false);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const [notification, setNotification] = useState<{
        message: string;
        type: 'success' | 'error';
        show: boolean;
    }>({ message: '', type: 'success', show: false });

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö NFT
    const [createdNFTs, setCreatedNFTs] = useState<Array<{
        name: string;
        description: string;
        imageUrl: string;
        level: number;
        power: number;
        rarity: number;
        transactionDigest: string;
        objectId?: string;
        createdAt: number;
    }>>([]);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã NFT
    const [nftParams, setNftParams] = useState({
        name: 'My Hero NFT',
        description: 'A powerful hero for the hackathon',
        imageUrl: 'https://example.com/hero.png',
        level: 1,
        power: 100,
        rarity: 4
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const showNotification = (message: string, type: 'success' | 'error') => {
        setNotification({ message, type, show: true });
        setTimeout(() => {
            setNotification(prev => ({ ...prev, show: false }));
        }, 5000); // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    };

    const mintNFT = async () => {
        if (!currentAccount) {
            showNotification('‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ Sui Wallet!', 'error');
            return;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π PACKAGE_ID –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ—Ç ContractDeployer
        const PACKAGE_ID = packageId;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ Package ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if (!packageId) {
            showNotification('‚ùå Package ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤—ã—à–µ.', 'error');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ rarity
        if (nftParams.rarity < 1 || nftParams.rarity > 4) {
            showNotification('‚ùå –†–µ–¥–∫–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 4', 'error');
            return;
        }

        setLoading(true);
        console.log('üé® –°–æ–∑–¥–∞–Ω–∏–µ NFT —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', nftParams);
        console.log('üì¶ Package ID:', PACKAGE_ID);
        console.log('üë§ –ö–æ—à–µ–ª–µ–∫:', currentAccount.address);

        try {
            const tx = new Transaction();

            tx.moveCall({
                target: `${PACKAGE_ID}::basic_nft::mint_game_nft`,
                arguments: [
                    tx.pure.string(nftParams.name),
                    tx.pure.string(nftParams.description),
                    tx.pure.string(nftParams.imageUrl),
                    tx.pure.u64(nftParams.level),
                    tx.pure.u64(nftParams.power),
                    tx.pure.u8(nftParams.rarity),
                ],
            });

            console.log('üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ –ø–æ–¥–ø–∏—Å—å...');

            signAndExecute(
                { transaction: tx },
                {
                    onSuccess: async (result) => {
                        console.log('‚úÖ NFT —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', result);

                        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å Object ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ NFT
                        let objectId: string | null = null;
                        try {
                            // –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
                            await new Promise(resolve => setTimeout(resolve, 2000));

                            const txDetails = await suiClient.getTransactionBlock({
                                digest: result.digest,
                                options: {
                                    showEffects: true,
                                    showObjectChanges: true,
                                }
                            });

                            // –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π NFT –æ–±—ä–µ–∫—Ç
                            if (txDetails.effects?.created) {
                                for (const created of txDetails.effects.created) {
                                    // –ù–∞—Ö–æ–¥–∏–º immutable object (—ç—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–∞—à NFT)
                                    const objId = created.reference.objectId;
                                    if (objId && objId !== packageId) {
                                        objectId = objId;
                                        console.log('‚úÖ –ù–∞–π–¥–µ–Ω Object ID NFT:', objectId);
                                        break;
                                    }
                                }
                            }
                        } catch (error) {
                            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Object ID NFT:', error);
                        }

                        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π NFT –≤ —Å–ø–∏—Å–æ–∫
                        const newNFT = {
                            ...nftParams,
                            transactionDigest: result.digest,
                            objectId: objectId || undefined,
                            createdAt: Date.now()
                        };

                        setCreatedNFTs(prev => [newNFT, ...prev]); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞

                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                        showNotification(
                            `üéâ NFT "${nftParams.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! ${objectId ? 'Object ID –ø–æ–ª—É—á–µ–Ω.' : '–°—Å—ã–ª–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∏–∂–µ.'}`,
                            'success'
                        );

                        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
                        setNftParams({
                            name: 'My Hero NFT',
                            description: 'A powerful hero for the hackathon',
                            imageUrl: 'https://example.com/hero.png',
                            level: 1,
                            power: 100,
                            rarity: 4
                        });
                    },
                    onError: (error) => {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ NFT:', error);

                        let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';

                        if (error.message?.includes('Invalid input')) {
                            errorMessage = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Package ID. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –º–æ–¥—É–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç.';
                        } else if (error.message?.includes('Insufficient')) {
                            errorMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SUI —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞ faucet.sui.io';
                        } else if (error.message?.includes('User rejected')) {
                            errorMessage = '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º';
                        } else if (error.message) {
                            errorMessage = error.message;
                        }

                        showNotification(`‚ùå ${errorMessage}`, 'error');
                    }
                }
            );

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
            showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12).', 'error');
        } finally {
            setLoading(false);
        }
    };

    if (!currentAccount) {
        return (
            <div className="nft-minter">
                <p>üîí –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è NFT</p>
            </div>
        );
    }

    return (
        <div className="nft-minter">
            <h3>üé® –°–æ–∑–¥–∞—Ç—å Game NFT</h3>

            {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ */}
            {notification.show && (
                <div
                    style={{
                        position: 'fixed',
                        top: '20px',
                        right: '20px',
                        padding: '15px 20px',
                        borderRadius: '8px',
                        color: 'white',
                        backgroundColor: notification.type === 'success' ? '#28a745' : '#dc3545',
                        boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
                        zIndex: 1000,
                        maxWidth: '400px',
                        fontSize: '14px',
                        fontWeight: 'bold',
                        cursor: 'pointer',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'space-between'
                    }}
                    onClick={() => setNotification(prev => ({ ...prev, show: false }))}
                >
                    <span>{notification.message}</span>
                    <span style={{ marginLeft: '10px', fontSize: '16px' }}>√ó</span>
                </div>
            )}

            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä Package ID */}
            <div style={{
                marginBottom: '20px',
                padding: '15px',
                backgroundColor: packageId ? '#d4edda' : '#fff3cd',
                borderRadius: '8px',
                border: `1px solid ${packageId ? '#c3e6cb' : '#ffeeba'}`
            }}>
                <strong>üì¶ Package ID:</strong>
                {packageId ? (
                    <code style={{
                        display: 'block',
                        backgroundColor: '#fff',
                        padding: '8px',
                        borderRadius: '4px',
                        fontSize: '12px',
                        fontFamily: 'monospace',
                        wordBreak: 'break-all',
                        margin: '8px 0 0 0',
                        color: '#155724'
                    }}>{packageId}</code>
                ) : (
                    <span style={{ color: '#856404', marginLeft: '8px' }}>
                        ‚è≥ –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤—ã—à–µ
                    </span>
                )}
            </div>

            <div style={{ marginBottom: '20px' }}>
                <label>
                    –ò–º—è NFT:
                    <input
                        type="text"
                        value={nftParams.name}
                        onChange={(e) => setNftParams({ ...nftParams, name: e.target.value })}
                        style={{ width: '100%', marginTop: '5px', padding: '8px' }}
                    />
                </label>
            </div>

            <div style={{ marginBottom: '20px' }}>
                <label>
                    –û–ø–∏—Å–∞–Ω–∏–µ:
                    <textarea
                        value={nftParams.description}
                        onChange={(e) => setNftParams({ ...nftParams, description: e.target.value })}
                        style={{ width: '100%', marginTop: '5px', padding: '8px' }}
                    />
                </label>
            </div>

            <div style={{ marginBottom: '20px' }}>
                <label>
                    URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
                    <input
                        type="url"
                        value={nftParams.imageUrl}
                        onChange={(e) => setNftParams({ ...nftParams, imageUrl: e.target.value })}
                        style={{ width: '100%', marginTop: '5px', padding: '8px' }}
                    />
                </label>
            </div>

            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: '10px', marginBottom: '20px' }}>
                <label>
                    –£—Ä–æ–≤–µ–Ω—å:
                    <input
                        type="number"
                        min="1"
                        value={nftParams.level}
                        onChange={(e) => setNftParams({ ...nftParams, level: parseInt(e.target.value) })}
                        style={{ width: '100%', marginTop: '5px', padding: '8px' }}
                    />
                </label>

                <label>
                    –°–∏–ª–∞:
                    <input
                        type="number"
                        min="1"
                        value={nftParams.power}
                        onChange={(e) => setNftParams({ ...nftParams, power: parseInt(e.target.value) })}
                        style={{ width: '100%', marginTop: '5px', padding: '8px' }}
                    />
                </label>

                <label>
                    –†–µ–¥–∫–æ—Å—Ç—å (1-4):
                    <select
                        value={nftParams.rarity}
                        onChange={(e) => setNftParams({ ...nftParams, rarity: parseInt(e.target.value) })}
                        style={{ width: '100%', marginTop: '5px', padding: '8px' }}
                    >
                        <option value={1}>1 - Common</option>
                        <option value={2}>2 - Rare</option>
                        <option value={3}>3 - Epic</option>
                        <option value={4}>4 - Legendary</option>
                    </select>
                </label>
            </div>

            <button
                onClick={mintNFT}
                disabled={loading}
                style={{
                    padding: '12px 24px',
                    fontSize: '16px',
                    backgroundColor: loading ? '#ccc' : '#007bff',
                    color: 'white',
                    border: 'none',
                    borderRadius: '6px',
                    cursor: loading ? 'not-allowed' : 'pointer'
                }}
            >
                {loading ? '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...' : 'üé® –°–æ–∑–¥–∞—Ç—å NFT'}
            </button>

            {/* –°–µ–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö NFT */}
            {createdNFTs.length > 0 && (
                <div style={{ marginTop: '30px' }}>
                    <h3>üéâ –°–æ–∑–¥–∞–Ω–Ω—ã–µ NFT</h3>
                    <div style={{
                        display: 'grid',
                        gap: '20px',
                        gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
                        marginTop: '15px'
                    }}>
                        {createdNFTs.map((nft, index) => {
                            const rarityName = ['', 'Common', 'Rare', 'Epic', 'Legendary'][nft.rarity];
                            const rarityColor = ['', '#6c757d', '#28a745', '#7b1fa2', '#ff6f00'][nft.rarity];

                            return (
                                <div
                                    key={index}
                                    style={{
                                        padding: '20px',
                                        border: '2px solid #e9ecef',
                                        borderRadius: '12px',
                                        backgroundColor: '#f8f9fa',
                                        boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
                                    }}
                                >
                                    <div style={{ marginBottom: '15px' }}>
                                        <h4 style={{ margin: '0 0 8px 0', color: '#212529' }}>
                                            {nft.name}
                                        </h4>
                                        <p style={{
                                            margin: '0 0 8px 0',
                                            color: '#6c757d',
                                            fontSize: '14px',
                                            lineHeight: '1.4'
                                        }}>
                                            {nft.description}
                                        </p>
                                        <span style={{
                                            background: rarityColor,
                                            color: 'white',
                                            padding: '4px 8px',
                                            borderRadius: '4px',
                                            fontSize: '12px',
                                            fontWeight: 'bold'
                                        }}>
                                            {rarityName}
                                        </span>
                                    </div>

                                    <div style={{
                                        display: 'grid',
                                        gridTemplateColumns: '1fr 1fr',
                                        gap: '10px',
                                        marginBottom: '15px',
                                        fontSize: '14px'
                                    }}>
                                        <div>‚ö° –£—Ä–æ–≤–µ–Ω—å: <strong>{nft.level}</strong></div>
                                        <div>üí™ –°–∏–ª–∞: <strong>{nft.power}</strong></div>
                                    </div>

                                    {nft.imageUrl && nft.imageUrl !== 'https://example.com/hero.png' && (
                                        <div style={{ marginBottom: '15px' }}>
                                            <img
                                                src={nft.imageUrl}
                                                alt={nft.name}
                                                style={{
                                                    width: '100%',
                                                    maxHeight: '150px',
                                                    objectFit: 'cover',
                                                    borderRadius: '8px'
                                                }}
                                                onError={(e) => {
                                                    (e.target as HTMLImageElement).style.display = 'none';
                                                }}
                                            />
                                        </div>
                                    )}

                                    <div style={{ fontSize: '12px', color: '#6c757d', marginBottom: '10px' }}>
                                        –°–æ–∑–¥–∞–Ω: {new Date(nft.createdAt).toLocaleString('ru-RU')}
                                    </div>

                                    <div style={{ display: 'flex', gap: '10px', flexWrap: 'wrap' }}>
                                        <a
                                            href={`https://suiscan.xyz/testnet/tx/${nft.transactionDigest}`}
                                            target="_blank"
                                            rel="noopener noreferrer"
                                            style={{
                                                padding: '8px 12px',
                                                backgroundColor: '#007bff',
                                                color: 'white',
                                                textDecoration: 'none',
                                                borderRadius: '4px',
                                                fontSize: '12px',
                                                fontWeight: 'bold'
                                            }}
                                        >
                                            üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                                        </a>
                                        {nft.objectId && (
                                            <a
                                                href={`https://suiscan.xyz/testnet/object/${nft.objectId}`}
                                                target="_blank"
                                                rel="noopener noreferrer"
                                                style={{
                                                    padding: '8px 12px',
                                                    backgroundColor: '#17a2b8',
                                                    color: 'white',
                                                    textDecoration: 'none',
                                                    borderRadius: '4px',
                                                    fontSize: '12px',
                                                    fontWeight: 'bold'
                                                }}
                                            >
                                                üé® NFT –û–±—ä–µ–∫—Ç
                                            </a>
                                        )}
                                        <a
                                            href={`https://suiscan.xyz/testnet/account/${currentAccount?.address}`}
                                            target="_blank"
                                            rel="noopener noreferrer"
                                            style={{
                                                padding: '8px 12px',
                                                backgroundColor: '#28a745',
                                                color: 'white',
                                                textDecoration: 'none',
                                                borderRadius: '4px',
                                                fontSize: '12px',
                                                fontWeight: 'bold'
                                            }}
                                        >
                                            üëõ –ö–æ—à–µ–ª–µ–∫
                                        </a>
                                    </div>
                                </div>
                            );
                        })}
                    </div>
                </div>
            )}
        </div>
    );
};
